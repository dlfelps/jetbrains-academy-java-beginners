type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            var game = new GameBoard();
            game.printBoard();

            Scanner scanner = new Scanner(System.in);

            boolean shipNotPlaced = true;
            String input;
            String[] temp;

            System.out.println("Enter the coordinates of the Aircraft Carrier (5 cells):");
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var carrier = Ship.makeCarrier(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(carrier);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }



            System.out.println("Enter the coordinates of the Battleship (4 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var battleship = Ship.makeBattleship(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(battleship);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }

            System.out.println("Enter the coordinates of the Submarine (3 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var submarine = Ship.makeSubmarine(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(submarine);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }

            System.out.println("Enter the coordinates of the Cruiser (3 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var cruiser = Ship.makeCruiser(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(cruiser);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }

            System.out.println("Enter the coordinates of the Destroyer (2 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var destroyer = Ship.makeDestroyer(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(destroyer);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }



        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Coordinates.java
  visible: true
  text: |-
    package battleship;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Stream;

    import static java.lang.Math.abs;

    record Coordinates(int col, int row) {
        public static Coordinates fromString(String s) throws IllegalArgumentException{

            var row = switch(s.toUpperCase().charAt(0)) {
                case 'A' -> 1;
                case 'B' -> 2;
                case 'C' -> 3;
                case 'D' -> 4;
                case 'E' -> 5;
                case 'F' -> 6;
                case 'G' -> 7;
                case 'H' -> 8;
                case 'I' -> 9;
                case 'J' -> 10;
                default -> throw new IllegalArgumentException("Error! You entered the wrong coordinates! Try again:");
            };

            int col;
            if (s.length() == 2){ //1-9
                col = Integer.parseInt(s.substring(1,2));
            } else { //10
                col = Integer.parseInt(s.substring(1,3));
            }
            if (col > 10){
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }
            return new Coordinates(col, row);
        }

        public int distanceTo(Coordinates other) throws IllegalArgumentException{
            int distance;

            if (this.row == other.row) {
                distance = abs(this.col - other.col) + 1;
            } else if (this.col == other.col) {
                distance = abs(this.row - other.row) + 1;
            } else {
                throw new IllegalArgumentException("Error! Not a valid set of coordinates!");
            }
            return distance;
        }

        public List<Coordinates> spans(Coordinates other) throws IllegalArgumentException{

            List<Coordinates> coords = new ArrayList<>();


            if (this.row == other.row) {
                var low = (this.col < other.col) ? this.col : other.col;
                var high = (this.col < other.col) ? other.col : this.col;

                for (int i = low; i <= high; i++) {
                    coords.add(new Coordinates(i, this.row));
                }
            } else if (this.col == other.col) {
                var low = (this.row < other.row) ? this.row : other.row;
                var high = (this.row < other.row) ? other.row : this.row;

                for (int i = low; i <= high; i++) {
                    coords.add(new Coordinates(this.col, i));
                }
            } else {
                throw new IllegalArgumentException("Error! Not a valid set of coordinates!");
            }
            return coords;
        }

        public Stream<Coordinates> surroundingPoints() {
            return List.of(new Coordinates(this.col, this.row),
                    new Coordinates(this.col-1, this.row),
                    new Coordinates(this.col+1, this.row),
                    new Coordinates(this.col, this.row-1),
                    new Coordinates(this.col, this.row+1)
                    ).stream();
        }
    }
  learner_created: true
- name: src/battleship/State.java
  visible: true
  text: |+
    package battleship;

    public enum State {
        CARRIER,
        BATTLESHIP,
        SUBMARINE,
        CRUISER,
        DESTROYER,
        OPEN,
        ADJACENT,
        HIT,
        MISS;

        @Override
        public String toString(){
            return switch (this) {
                case CARRIER -> "Aircraft Carrier";
                case BATTLESHIP -> "Battleship";
                case SUBMARINE -> "Submarine";
                case CRUISER -> "Cruiser";
                case DESTROYER -> "Destroyer";
                case OPEN -> "Open";
                case ADJACENT -> "Adjacent";
                case HIT -> "Hit";
                case MISS -> "Miss";
            };
        }
    }

  learner_created: true
- name: src/battleship/Battleship.java
  visible: true
  text: |+
    package battleship;


    import java.util.*;
    import java.util.function.Predicate;
    import java.util.stream.Collectors;

    import static battleship.State.*;

    public class Battleship {

        private HashMap<Coordinates,State> board;

        private Battleship(Map<Coordinates,State> initialState){
            board = new HashMap(100);
            board.putAll(initialState);
        }

        public static Battleship empty() {
            var emptyBoard = new Battleship(new HashMap<Coordinates,State>());
            for (int row = 1; row < 11; row++) {
                for (int col = 1; col < 11; col++) {
                    emptyBoard.updateBoard(new Coordinates(col, row), OPEN);
                }
            }
            return emptyBoard;
        }

        public void updateBoard(Coordinates key, State value){
            board.put(key, value);
        }

        public State getState(Coordinates c){
            return board.getOrDefault(c, OPEN);
        }

        public void printTrueState() {

            System.out.println("  1 2 3 4 5 6 7 8 9 10");

            for (int row = 1; row < 11; row++) {
                switch (row){
                    case 1 -> System.out.print("A");
                    case 2 -> System.out.print("B");
                    case 3 -> System.out.print("C");
                    case 4 -> System.out.print("D");
                    case 5 -> System.out.print("E");
                    case 6 -> System.out.print("F");
                    case 7 -> System.out.print("G");
                    case 8 -> System.out.print("H");
                    case 9 -> System.out.print("I");
                    case 10 -> System.out.print("J");
                }

                for (int col = 1; col < 11; col++) {
                    switch (getState(new Coordinates(col, row))) {
                        case OPEN, ADJACENT -> System.out.print(" ~");
                        case BATTLESHIP, CARRIER, CRUISER, DESTROYER, SUBMARINE  -> System.out.print(" O");
                        case HIT -> System.out.print(" X");
                        case MISS -> System.out.print(" M");
                    }
                }
                System.out.println();
            }
        }

        public void printFoggyState() {

            System.out.println("  1 2 3 4 5 6 7 8 9 10");

            for (int row = 1; row < 11; row++) {
                switch (row){
                    case 1 -> System.out.print("A");
                    case 2 -> System.out.print("B");
                    case 3 -> System.out.print("C");
                    case 4 -> System.out.print("D");
                    case 5 -> System.out.print("E");
                    case 6 -> System.out.print("F");
                    case 7 -> System.out.print("G");
                    case 8 -> System.out.print("H");
                    case 9 -> System.out.print("I");
                    case 10 -> System.out.print("J");
                }

                for (int col = 1; col < 11; col++) {
                    switch (getState(new Coordinates(col, row))) {
                        case OPEN, ADJACENT -> System.out.print(" ~");
                        case BATTLESHIP, CARRIER, CRUISER, DESTROYER, SUBMARINE  -> System.out.print(" ~");
                        case HIT -> System.out.print(" X");
                        case MISS -> System.out.print(" M");
                    }
                }
                System.out.println();
            }
        }

        public void setupBoard() {

            addShip(CARRIER,5);
            addShip(BATTLESHIP,4);
            addShip(SUBMARINE,3);
            addShip(CRUISER,3);
            addShip(DESTROYER,2);
        }

        private void addShip(State ship, int shipLength) {
            Optional<HashMap<Coordinates, State>> boardWithShip = Optional.empty();
            while (boardWithShip.isEmpty()) {
                boardWithShip = tryPlaceShip(ship, shipLength);
            }
            //successful placement
            board = boardWithShip.get();//gets the value from optional
            printTrueState();
        }

        private Optional<HashMap<Coordinates,State>> tryPlaceShip(State shipType, int shipLength) {
            System.out.println(String.format("Enter the coordinates of the %s (%d cells):", shipType, shipLength));
            var scanner = new Scanner(System.in);

            Optional<HashMap<Coordinates,State>> newBoard = Optional.empty();

            try {
                var input = scanner.nextLine();
                var temp = input.split(" ");
                var start = Coordinates.fromString(temp[0]);
                var stop = Coordinates.fromString(temp[1]);
                var shipSpan = start.spans(stop);
                if (start.distanceTo(stop) != shipLength) {
                    throw new IllegalArgumentException(String.format("Error! Wrong length of the %s! Try again:", shipType));
                }
                // ensure all spots are open
                var shipSurround = shipSpan.stream()
                        .flatMap(Coordinates::surroundingPoints)
                        .collect(Collectors.toList());

                var isOpen = shipSpan.stream()
                        .map(key -> getState(key))
                        .allMatch(state -> state == OPEN);


                if (isOpen) { // add the ship to the board
                    var updatedGame = new Battleship(board);
                    shipSurround.forEach(coord -> updatedGame.updateBoard(coord, ADJACENT));
                    shipSpan.forEach(coord -> updatedGame.updateBoard(coord, shipType));
                    newBoard = Optional.of(updatedGame.board);
                } else {
                    throw new IllegalArgumentException("Error! You placed it too close to another one. Try again:");
                }
            } catch (RuntimeException e){
                System.out.println(e.getMessage());
            }
            return newBoard;
        }

        public void play() {
            System.out.println("The game starts!");
            boolean allSunk = false;

            while (!allSunk){
                printFoggyState();
                takeShot();
                allSunk = checkSunk();
            }

            System.out.println("You sank the last ship. You won. Congratulations!");
        }

        private boolean checkSunk() {
            Predicate<State> notCarrier = Predicate.not(Predicate.isEqual(CARRIER));
            Predicate<State> notBattleship = Predicate.not(Predicate.isEqual(BATTLESHIP));
            Predicate<State> notSubmarine = Predicate.not(Predicate.isEqual(SUBMARINE));
            Predicate<State> notCruiser = Predicate.not(Predicate.isEqual(CRUISER));
            Predicate<State> notDestroyer = Predicate.not(Predicate.isEqual(DESTROYER));
            return board.values().stream().allMatch(notCarrier
                    .and(notBattleship)
                    .and(notSubmarine)
                    .and(notCruiser)
                    .and(notDestroyer));
        }

        private void takeShot() {
            Optional<HashMap<Coordinates, State>> boardWithShot = Optional.empty();
            while (boardWithShot.isEmpty()) {
                boardWithShot = tryTakeShot();
            }
            //successful placement
            board = boardWithShot.get();//gets the value from optional
        }
        private Optional<HashMap<Coordinates, State>>  tryTakeShot() {

            Optional<HashMap<Coordinates,State>> newBoard = Optional.empty();

            System.out.println("Take a shot!");
            try {
                var scanner = new Scanner(System.in);
                var missile = Coordinates.fromString(scanner.next());
                State result = launch(missile);
                var updatedGame = new Battleship(board);
                updatedGame.updateBoard(missile, result);
                newBoard = Optional.of(updatedGame.board);
                updatedGame.printFoggyState();
                switch (result) {
                    case HIT -> System.out.println("You hit a ship!");
                    case MISS -> System.out.println("You missed!");
                }
            } catch (RuntimeException e){
                System.out.println(e.getMessage());
            }

            return newBoard;
        }

        private State launch(Coordinates missile) {
            var newState = switch(getState(missile)) {
                case MISS, OPEN, ADJACENT -> MISS;
                case HIT, CARRIER, CRUISER, DESTROYER, SUBMARINE, BATTLESHIP -> HIT;
            };
            return newState;
        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Unchecked
record: -1
