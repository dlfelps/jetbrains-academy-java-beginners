type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            var game = new GameBoard();
            game.printBoard();

            Scanner scanner = new Scanner(System.in);

            boolean shipNotPlaced = true;
            String input;
            String[] temp;

            System.out.println("Enter the coordinates of the Aircraft Carrier (5 cells):");
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var carrier = Ship.makeCarrier(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(carrier);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }



            System.out.println("Enter the coordinates of the Battleship (4 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var battleship = Ship.makeBattleship(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(battleship);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }

            System.out.println("Enter the coordinates of the Submarine (3 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var submarine = Ship.makeSubmarine(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(submarine);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }

            System.out.println("Enter the coordinates of the Cruiser (3 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var cruiser = Ship.makeCruiser(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(cruiser);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }

            System.out.println("Enter the coordinates of the Destroyer (2 cells):");
            shipNotPlaced = true;
            while (shipNotPlaced){
                input = scanner.nextLine();
                temp = input.split(" ");
                try{
                    var destroyer = Ship.makeDestroyer(Coordinates.fromString(temp[0]), Coordinates.fromString(temp[1]));
                    game.addShip(destroyer);
                    game.printBoard();
                    shipNotPlaced = false;
                }catch (IllegalArgumentException e){
                    System.out.println(e.getMessage());
                }
            }



        }
    }
  learner_created: false
- name: src/battleship/GameBoard.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Square {
        SHIP, HIT, MISS, OUT_OF_BOUNDS, OPEN
    }

    record Coordinates(int row, int col) {
        public static Coordinates fromString(String s) throws NumberFormatException, IllegalArgumentException{

            var row = switch(s.toUpperCase().charAt(0)) {
                case 'A' -> 1;
                case 'B' -> 2;
                case 'C' -> 3;
                case 'D' -> 4;
                case 'E' -> 5;
                case 'F' -> 6;
                case 'G' -> 7;
                case 'H' -> 8;
                case 'I' -> 9;
                case 'J' -> 10;
                default -> throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            };

            int col;
            if (s.length() == 2){ //1-9
                col = Integer.parseInt(s.substring(1,2));
            } else { //10
                col = Integer.parseInt(s.substring(1,3));
            }
            if (col > 10){
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }
            return new Coordinates(row, col);
        }
    }

    class GameBoard {

        ArrayList<Ship> ships = new ArrayList();
        ArrayList<Coordinates> guesses = new ArrayList();

        private Square getSquareState(Coordinates c) {

            boolean isShip = false;
            boolean isGuess = false;

            Square state;

            for (Ship ship : ships) {
                if (ship.spans(c)) {
                    isShip = true;
                }
            }

            for (Coordinates guess : guesses) {
                if (guess == c) {
                    isGuess = true;
                }
            }

            if (isShip && isGuess) {
                state = Square.HIT;
            } else if (isShip) {
                state = Square.SHIP;
            } else if (isGuess) {
                state = Square.MISS;
            } else {
                state = Square.OPEN;
            }

            return state;
        }

        private boolean isShipLegal(Ship ship){
            var status = true;
            for (Coordinates c: ship.coords) {
                if (getSquareState(c) != Square.OPEN) {
                    status = false;
                }
            }
            return status;
        }

        public void addShip(Ship ship) throws IllegalArgumentException {
            if (isShipLegal(ship)){
                this.ships.add(ship);
            } else {
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }
        }

        private String displaySquareState(Square s){
            return switch (s) {
                case SHIP -> "O";
                case HIT -> "X";
                case OPEN -> "~";
                case MISS -> "M";
                case OUT_OF_BOUNDS -> "?";
            };
        }
        private String printRowState(int row){

            List<Coordinates> board = List.of(new Coordinates(row,1),
                    new Coordinates(row,2),
                    new Coordinates(row,3),
                    new Coordinates(row,4),
                    new Coordinates(row,5),
                    new Coordinates(row,6),
                    new Coordinates(row,7),
                    new Coordinates(row,8),
                    new Coordinates(row,9),
                    new Coordinates(row,10));

            return String.join(" ", board.stream()
                    .map((Coordinates c) -> getSquareState(c))
                    .map((Square s) -> displaySquareState(s))
                    .collect(Collectors.toList()));
        }
        private String printRow(int i){
            var rows = "-ABCDEFGHIJ";

            return rows.charAt(i) + " " + printRowState(i);
        }

        public void printBoard(){

            for (int i = 0; i<11; i++) {
                switch (i) {
                    case 0 -> System.out.println("  1 2 3 4 5 6 7 8 9 10");
                    default -> System.out.println(printRow(i));
                };
            }

        }


    }
  learner_created: false
- name: src/battleship/Ship.java
  visible: true
  text: |+
    package battleship;

    import java.util.List;

    enum ShipType {
        CARRIER, BATTLESHIP, SUBMARINE, CRUISER, DESTROYER
    }

    class Ship{
        List<Coordinates> coords;
        ShipType type;

        private Ship(ShipType type, List<Coordinates> coords) {
            this.coords = coords;
            this.type = type;
        }

        public static Ship makeCarrier(Coordinates start, Coordinates end) throws IllegalArgumentException{
            List<Coordinates> coords;

            if (start.row() == end.row()){ // on same row
                if (start.col() < end.col()) { //oriented left-to-right
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() + 1),
                            new Coordinates(start.row(), start.col() + 2),
                            new Coordinates(start.row(), start.col() + 3),
                            new Coordinates(start.row(), start.col() + 4));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() - 1),
                            new Coordinates(start.row(), start.col() - 2),
                            new Coordinates(start.row(), start.col() - 3),
                            new Coordinates(start.row(), start.col() - 4));
                }
            } else if (start.col() == end.col()) { // in same column
                if (start.row() < end.row()) { //oriented top-to-bottom
                    coords = List.of(start,
                            new Coordinates(start.row() + 1, start.col()),
                            new Coordinates(start.row() + 2, start.col()),
                            new Coordinates(start.row() + 3, start.col()),
                            new Coordinates(start.row() + 4, start.col()));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row() - 1, start.col()),
                            new Coordinates(start.row() - 2, start.col()),
                            new Coordinates(start.row() - 3, start.col()),
                            new Coordinates(start.row() - 4, start.col()));
                }
            } else {
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            if (!coords.get(4).equals(end)) { // calculated end should be actual end
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            return new Ship(ShipType.CARRIER, coords);
        }
        public static Ship makeBattleship(Coordinates start, Coordinates end) throws IllegalArgumentException{
            List<Coordinates> coords;

            if (start.row() == end.row()){ // on same row
                if (start.col() < end.col()) { //oriented left-to-right
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() + 1),
                            new Coordinates(start.row(), start.col() + 2),
                            new Coordinates(start.row(), start.col() + 3));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() - 1),
                            new Coordinates(start.row(), start.col() - 2),
                            new Coordinates(start.row(), start.col() - 3));
                }
            } else if (start.col() == end.col()) { // in same column
                if (start.row() < end.row()) { //oriented top-to-bottom
                    coords = List.of(start,
                            new Coordinates(start.row() + 1, start.col()),
                            new Coordinates(start.row() + 2, start.col()),
                            new Coordinates(start.row() + 3, start.col()));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row() - 1, start.col()),
                            new Coordinates(start.row() - 2, start.col()),
                            new Coordinates(start.row() - 3, start.col()));
                }
            } else {
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            if (!coords.get(3).equals(end)) { // calculated end should be actual end
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            return new Ship(ShipType.BATTLESHIP, coords);
        }
        public static Ship makeSubmarine(Coordinates start, Coordinates end) throws IllegalArgumentException{
            List<Coordinates> coords;

            if (start.row() == end.row()){ // on same row
                if (start.col() < end.col()) { //oriented left-to-right
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() + 1),
                            new Coordinates(start.row(), start.col() + 2));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() - 1),
                            new Coordinates(start.row(), start.col() - 2));
                }
            } else if (start.col() == end.col()) { // in same column
                if (start.row() < end.row()) { //oriented top-to-bottom
                    coords = List.of(start,
                            new Coordinates(start.row() + 1, start.col()),
                            new Coordinates(start.row() + 2, start.col()));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row() - 1, start.col()),
                            new Coordinates(start.row() - 2, start.col()));
                }
            } else {
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            if (!coords.get(2).equals(end)) { // calculated end should be actual end
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            return new Ship(ShipType.SUBMARINE, coords);
        }
        public static Ship makeCruiser(Coordinates start, Coordinates end) throws IllegalArgumentException{
            List<Coordinates> coords;

            if (start.row() == end.row()){ // on same row
                if (start.col() < end.col()) { //oriented left-to-right
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() + 1),
                            new Coordinates(start.row(), start.col() + 2));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row(), start.col() - 1),
                            new Coordinates(start.row(), start.col() - 2));
                }
            } else if (start.col() == end.col()) { // in same column
                if (start.row() < end.row()) { //oriented top-to-bottom
                    coords = List.of(start,
                            new Coordinates(start.row() + 1, start.col()),
                            new Coordinates(start.row() + 2, start.col()));
                } else {
                    coords = List.of(start,
                            new Coordinates(start.row() - 1, start.col()),
                            new Coordinates(start.row() - 2, start.col()));
                }
            } else {
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            if (!coords.get(2).equals(end)) { // calculated end should be actual end
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            return new Ship(ShipType.CRUISER, coords);
        }
        public static Ship makeDestroyer(Coordinates start, Coordinates end) throws IllegalArgumentException{
            List<Coordinates> coords;

            if (start.row() == end.row()){ // on same row
                if (start.col() < end.col()) { //oriented left-to-right
                    coords = List.of(start, new Coordinates(start.row(), start.col() + 1));
                } else {
                    coords = List.of(start, new Coordinates(start.row(), start.col() - 1));
                }
            } else if (start.col() == end.col()) { // in same column
                if (start.row() < end.row()) { //oriented top-to-bottom
                    coords = List.of(start, new Coordinates(start.row()+1, start.col()));
                } else {
                    coords = List.of(start, new Coordinates(start.row()-1, start.col()));
                }
            } else {
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            if (!coords.get(1).equals(end)) { // calculated end should be actual end
                throw new IllegalArgumentException("Error: Wrong ship location! Try again:");
            }

            return new Ship(ShipType.DESTROYER, coords);
        }

        public boolean spans(Coordinates c) {
            return coords.contains(c);
        }

    }

  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/125/stages/665/implement#comment
status: Unchecked
record: -1
